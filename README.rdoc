= Easy Money!

A Ruby mixin library to add simple money display and editing using data stored as an integer in 
cents or other precision or currency.

We know not to use float types for money, as the rounding and decimal representation quirks are
not tolerated for finance. Integers are preferred, and storing the currency with implied decimal
makes for additional work translating back and forth. 

Other money libraries exist that work well, but sometimes, a simpler
interface is all you need, especially when you are displaying and editing these values.

== Quick Start
Easy Money works in any Ruby class, it does not require Active Record or other ORM.

 require 'rubygems' # unless RAILS
 require 'easy_money' # Or define in your Gemfile, config/environment.rb, etc.
 
 class AccountReceivable
   include EasyMoney
   attr_accessor :amount, :euro # Integer value of cents
   money_in_cents :amount
   money_in_cents :amount, :units=>"dollars", :unit=>'$', :negative=>'%.2f CR'
 end

 ar = AccountReceivable.new
 ar.amount = 100 # 100 cents = $1.00
 ar.amount_money  #=> "1.00"
 ar.amount_money = "-123.45"
 ar.amount        #=> -12345 (cents)
 ar.amount_money(:negative=>'%.2f CR', :zero=>'Free') # Uses these formats 
 ar.amount_dollars #=> "$123.45 CR"


 # Track the bets of the Gamesters of Triskelion on their drill thrall competitions.
 class ProviderWagers < ActiveRecord::Base
   include EasyMoney

   money_in_cents :quatloos, :units=>'quatloos', :precision=>3, 
     :zero=>'even', :nil=>'no bet', :negative=>'%.3f Loss', :unit=>'Q',
     :credit_regex=>/^(-?)(.+\d)\s*Loss/i
   # def amount_quatloos(*args) ...
   # def amount_quatloos=(*args) ...
 end

 # in your views
 <%= f.text_field :amount_quatloos %>  # -12000 => "Q12.000 Loss"

Options for Easy Money calls:
* :money_method - Use this as the alternative name to the money-access methods
* :units - Use this as an alternative suffix name to the money methods ('dollars' gives 'xx_dollars')
* :precision - The number of digits implied after the decimal, default is 2
* :separator - The character to use after the integer part, default is '.'
* :delimiter - The character to use between every 3 digits of the integer part, default none
* :positive - The sprintf format to use for positive numbers, default is based on precision
* :negative - The sprintf format to use for negative numbers, default is same as :positive
* :zero - The sprintf format to use for zero, default is same as :positive
* :nil - The sprintf format to use for nil values, default none
* :unit - Prepend this to the front of the money value, say '$', default none
* :credit_regex - A Regular Expression used to determine if a number is negative (and without a - sign), defaults to having a "CR" after the number

== Easy Money Formatters
You can also call or build your own custom conversions. Be sure to ensure that
you can convert between the integer and money forms if you need to.

  include EasyMoney
  ...
  puts EasyMoney.money_to_cents( money_string, :option=>value, ... )
  puts EasyMoney.cents_to_money( cents_integer, :option=>value, ... )

The options to these methods are the same as the #money_in_cents declarations


== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Allen Fair. See LICENSE for details.
